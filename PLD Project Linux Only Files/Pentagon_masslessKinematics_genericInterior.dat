codim: 5, face: 1/10, weights: [-1, 0, 0, 0, 0], discriminant: M1
codim: 5, face: 2/10, weights: [1, 2, 2, 2, 2], discriminant: 1
codim: 5, face: 3/10, weights: [0, -1, 0, 0, 0], discriminant: M2
codim: 5, face: 4/10, weights: [2, 1, 2, 2, 2], discriminant: 1
codim: 5, face: 5/10, weights: [0, 0, -1, 0, 0], discriminant: M3
codim: 5, face: 6/10, weights: [2, 2, 1, 2, 2], discriminant: 1
codim: 5, face: 7/10, weights: [0, 0, 0, -1, 0], discriminant: M4
codim: 5, face: 8/10, weights: [2, 2, 2, 1, 2], discriminant: 1
codim: 5, face: 9/10, weights: [0, 0, 0, 0, -1], discriminant: M5
codim: 5, face: 10/10, weights: [2, 2, 2, 2, 1], discriminant: 1
codim: 4, face: 1/25, weights: [0, 1, 1, 1, 1], discriminant: 1
codim: 4, face: 2/25, weights: [-1, -1, 0, 0, 0], discriminant: M1 - M2
codim: 4, face: 3/25, weights: [-1, 0, -1, 0, 0], discriminant: M1^2 - 2*M1*M3 + M1*s23 - 2*M3^2 - 2*M3*s23 + s23^2
codim: 4, face: 4/25, weights: [-1, 0, 0, -1, 0], discriminant: M1^2 - 2*M1*M4 + M1*s51 - 2*M4^2 - 2*M4*s51 + s51^2
codim: 4, face: 5/25, weights: [-1, 0, 0, 0, -1], discriminant: M1 - M5
codim: 4, face: 6/25, weights: [1, 1, 2, 2, 2], discriminant: 1
codim: 4, face: 7/25, weights: [1, 2, 1, 2, 2], discriminant: 1
codim: 4, face: 8/25, weights: [1, 2, 2, 1, 2], discriminant: 1
codim: 4, face: 9/25, weights: [1, 2, 2, 2, 1], discriminant: 1
codim: 4, face: 10/25, weights: [1, 0, 1, 1, 1], discriminant: 1
codim: 4, face: 11/25, weights: [0, -1, -1, 0, 0], discriminant: M2 - M3
codim: 4, face: 12/25, weights: [0, -1, 0, -1, 0], discriminant: M2^2 - 2*M2*M4 + M2*s34 - 2*M4^2 - 2*M4*s34 + s34^2
codim: 4, face: 13/25, weights: [0, -1, 0, 0, -1], discriminant: M2^2 - 2*M2*M5 + M2*s12 - 2*M5^2 - 2*M5*s12 + s12^2
codim: 4, face: 14/25, weights: [2, 1, 1, 2, 2], discriminant: 1
codim: 4, face: 15/25, weights: [2, 1, 2, 1, 2], discriminant: 1
codim: 4, face: 16/25, weights: [2, 1, 2, 2, 1], discriminant: 1
codim: 4, face: 17/25, weights: [1, 1, 0, 1, 1], discriminant: 1
codim: 4, face: 18/25, weights: [0, 0, -1, -1, 0], discriminant: M3 - M4
codim: 4, face: 19/25, weights: [0, 0, -1, 0, -1], discriminant: M3^2 - 2*M3*M5 + M3*s45 - 2*M5^2 - 2*M5*s45 + s45^2
codim: 4, face: 20/25, weights: [2, 2, 1, 1, 2], discriminant: 1
codim: 4, face: 21/25, weights: [2, 2, 1, 2, 1], discriminant: 1
codim: 4, face: 22/25, weights: [1, 1, 1, 0, 1], discriminant: 1
codim: 4, face: 23/25, weights: [0, 0, 0, -1, -1], discriminant: M4 - M5
codim: 4, face: 24/25, weights: [2, 2, 2, 1, 1], discriminant: 1
codim: 4, face: 25/25, weights: [1, 1, 1, 1, 0], discriminant: 1
codim: 3, face: 1/30, weights: [0, 0, 1, 1, 1], discriminant: 1
codim: 3, face: 2/30, weights: [0, 1, 0, 1, 1], discriminant: s23
codim: 3, face: 3/30, weights: [0, 1, 1, 0, 1], discriminant: s51
codim: 3, face: 4/30, weights: [0, 1, 1, 1, 0], discriminant: 1
codim: 3, face: 5/30, weights: [-1, -1, -1, 0, 0], discriminant: M1^2*M3 - 2*M1*M2*M3 - 1/2*M1*M2*s23 + 1/2*M1*M3*s23 + M2^2*M3 + 1/2*M2^2*s23 - 1/2*M2*M3*s23 - 1/2*M2*s23^2
codim: 3, face: 6/30, weights: [-1, -1, 0, -1, 0], discriminant: M1^2*M4 - 1/2*M1^2*s34 - 2*M1*M2*M4 + 1/2*M1*M2*s34 - 1/2*M1*M2*s51 + 1/2*M1*M4*s34 + 1/2*M1*M4*s51 - 1/2*M1*s34^2 - 1/2*M1*s34*s51 + M2^2*M4 + 1/2*M2^2*s51 - 1/2*M2*M4*s34 - 1/2*M2*M4*s51 - 1/2*M2*s34*s51 - 1/2*M2*s51^2
codim: 3, face: 7/30, weights: [-1, -1, 0, 0, -1], discriminant: M1^2*M5 + 1/2*M1^2*s12 - 2*M1*M2*M5 - 1/2*M1*M2*s12 - 1/2*M1*M5*s12 - 1/2*M1*s12^2 + M2^2*M5 + 1/2*M2*M5*s12
codim: 3, face: 8/30, weights: [-1, 0, -1, -1, 0], discriminant: M1*M3*M4 - 1/2*M1*M3*s23 + 1/2*M1*M3*s51 + M1*M4^2 - 1/2*M1*M4*s23 + 1/2*M1*M4*s51 - M3^2*M4 - 1/2*M3^2*s51 + M3*M4^2 - 3/2*M3*M4*s23 + 3/2*M3*M4*s51 - 1/2*M3*s23*s51 + 1/2*M3*s51^2 + 1/2*M4^2*s23 - 1/2*M4*s23^2 + 1/2*M4*s23*s51
codim: 3, face: 9/30, weights: [-1, 0, -1, 0, -1], discriminant: M1^2*M5 - 1/2*M1^2*s45 - 2*M1*M3*M5 + 1/2*M1*M3*s23 + 1/2*M1*M3*s45 + 3/2*M1*M5*s23 + 1/2*M1*M5*s45 - 1/2*M1*s23*s45 - 1/2*M1*s45^2 + M3^2*M5 + 3/2*M3*M5*s23 - 1/2*M3*M5*s45 + 1/2*M5^2*s23 + 1/2*M5*s23^2 - 1/2*M5*s23*s45
codim: 3, face: 10/30, weights: [-1, 0, 0, -1, -1], discriminant: M1^2*M5 - 2*M1*M4*M5 + 1/2*M1*M4*s51 + 3/2*M1*M5*s51 + M4^2*M5 + 3/2*M4*M5*s51 + 1/2*M5^2*s51 + 1/2*M5*s51^2
codim: 3, face: 11/30, weights: [1, 1, 1, 2, 2], discriminant: 1
codim: 3, face: 12/30, weights: [1, 1, 2, 1, 2], discriminant: 1
codim: 3, face: 13/30, weights: [1, 1, 2, 2, 1], discriminant: 1
codim: 3, face: 14/30, weights: [1, 2, 1, 1, 2], discriminant: 1
codim: 3, face: 15/30, weights: [1, 2, 1, 2, 1], discriminant: 1
codim: 3, face: 16/30, weights: [1, 2, 2, 1, 1], discriminant: 1
codim: 3, face: 17/30, weights: [1, 0, 0, 1, 1], discriminant: M2
codim: 3, face: 18/30, weights: [1, 0, 1, 0, 1], discriminant: M4 + 1/2*s34
codim: 3, face: 19/30, weights: [1, 0, 1, 1, 0], discriminant: M5 + 1/2*s12
codim: 3, face: 20/30, weights: [0, -1, -1, -1, 0], discriminant: M2^2*M4 - 2*M2*M3*M4 - 1/2*M2*M3*s34 + 1/2*M2*M4*s34 + M3^2*M4 + 1/2*M3^2*s34 - 1/2*M3*M4*s34 - 1/2*M3*s34^2
codim: 3, face: 21/30, weights: [0, -1, -1, 0, -1], discriminant: M2^2*M5 - 1/2*M2^2*s45 - 2*M2*M3*M5 - 1/2*M2*M3*s12 + 1/2*M2*M3*s45 + 1/2*M2*M5*s12 + 1/2*M2*M5*s45 - 1/2*M2*s12*s45 - 1/2*M2*s45^2 + M3^2*M5 + 1/2*M3^2*s12 - 1/2*M3*M5*s12 - 1/2*M3*M5*s45 - 1/2*M3*s12^2 - 1/2*M3*s12*s45
codim: 3, face: 22/30, weights: [0, -1, 0, -1, -1], discriminant: M2*M4*M5 + 1/2*M2*M4*s12 - 1/2*M2*M4*s34 + M2*M5^2 + 1/2*M2*M5*s12 - 1/2*M2*M5*s34 - M4^2*M5 - 1/2*M4^2*s12 + M4*M5^2 + 3/2*M4*M5*s12 - 3/2*M4*M5*s34 + 1/2*M4*s12^2 - 1/2*M4*s12*s34 + 1/2*M5^2*s34 + 1/2*M5*s12*s34 - 1/2*M5*s34^2
codim: 3, face: 23/30, weights: [2, 1, 1, 1, 2], discriminant: 1
codim: 3, face: 24/30, weights: [2, 1, 1, 2, 1], discriminant: 1
codim: 3, face: 25/30, weights: [2, 1, 2, 1, 1], discriminant: 1
codim: 3, face: 26/30, weights: [1, 1, 0, 0, 1], discriminant: M3
codim: 3, face: 27/30, weights: [1, 1, 0, 1, 0], discriminant: M5 + 1/2*s45
codim: 3, face: 28/30, weights: [0, 0, -1, -1, -1], discriminant: M3^2*M5 - 2*M3*M4*M5 - 1/2*M3*M4*s45 + 1/2*M3*M5*s45 + M4^2*M5 + 1/2*M4^2*s45 - 1/2*M4*M5*s45 - 1/2*M4*s45^2
codim: 3, face: 29/30, weights: [2, 2, 1, 1, 1], discriminant: 1
codim: 3, face: 30/30, weights: [1, 1, 1, 0, 0], discriminant: M4
codim: 2, face: 1/20, weights: [0, 0, 0, 1, 1], discriminant: 1
codim: 2, face: 2/20, weights: [0, 0, 1, 0, 1], discriminant: -2*M1*s34 + M2^2 - M2*s34 - M2*s51 + 1/4*s34^2 - 1/2*s34*s51 + 1/4*s51^2
codim: 2, face: 3/20, weights: [0, 0, 1, 1, 0], discriminant: 4*M1*M5 - 2*M1*s12 + M2^2 + 2*M2*M5 - M2*s12 + M5^2 - M5*s12 + 1/4*s12^2
codim: 2, face: 4/20, weights: [0, 1, 0, 0, 1], discriminant: M1*M3 + 1/2*M3*s51 - 1/16*s23^2 + 1/8*s23*s51 - 1/16*s51^2
codim: 2, face: 5/20, weights: [0, 1, 0, 1, 0], discriminant: -2*M1*s45 + M3^2 + M3*s23 - M3*s45 + 1/4*s23^2 - 1/2*s23*s45 + 1/4*s45^2
codim: 2, face: 6/20, weights: [0, 1, 1, 0, 0], discriminant: 1
codim: 2, face: 7/20, weights: [-1, -1, -1, -1, 0], discriminant: M1^2*M3^2 + 2*M1^2*M3*M4 + M1^2*M3*s34 + M1^2*M4^2 + M1^2*M4*s34 + 1/4*M1^2*s34^2 - 2*M1*M2*M3^2 - 4*M1*M2*M3*M4 - M1*M2*M3*s23 - M1*M2*M3*s34 - M1*M2*M3*s51 - 2*M1*M2*M4^2 + M1*M2*M4*s23 - M1*M2*M4*s34 - M1*M2*M4*s51 + 1/2*M1*M2*s23*s34 - 1/2*M1*M2*s34*s51 - M1*M3^2*s34 + M1*M3^2*s51 - M1*M3*M4*s23 - M1*M3*M4*s34 + M1*M3*M4*s51 - 1/2*M1*M3*s34^2 + 1/2*M1*M3*s34*s51 + M1*M4^2*s23 + 3/2*M1*M4*s23*s34 + 1/2*M1*s23*s34^2 + M2^2*M3^2 + 2*M2^2*M3*M4 + M2^2*M3*s23 + M2^2*M3*s51 + M2^2*M4^2 - M2^2*M4*s23 + M2^2*M4*s51 + 1/4*M2^2*s23^2 - 1/2*M2^2*s23*s51 + 1/4*M2^2*s51^2 + M2*M3^2*s34 - M2*M3^2*s51 + M2*M3*M4*s23 + M2*M3*M4*s34 - M2*M3*M4*s51 + 3/2*M2*M3*s23*s34 - 3/2*M2*M3*s23*s51 + 1/2*M2*M3*s34*s51 - 1/2*M2*M3*s51^2 - M2*M4^2*s23 + 3/2*M2*M4*s23^2 - 3/2*M2*M4*s23*s51 + 1/2*M2*s23^2*s34 - 1/2*M2*s23*s34*s51 + 1/4*M3^2*s34^2 - 1/2*M3^2*s34*s51 + 1/4*M3^2*s51^2 + 1/2*M3*M4*s23*s34 - 1/2*M3*M4*s23*s51 + 1/2*M3*s23*s34^2 - 1/2*M3*s23*s34*s51 + 1/4*M4^2*s23^2 + 1/2*M4*s23^2*s34 + 1/4*s23^2*s34^2
codim: 2, face: 8/20, weights: [-1, -1, -1, 0, -1], discriminant: M1^2*M5^2 + M1^2*M5*s12 + M1^2*M5*s45 + 1/4*M1^2*s12^2 + 1/2*M1^2*s12*s45 + 1/4*M1^2*s45^2 - 2*M1*M2*M5^2 - M1*M2*M5*s12 + M1*M2*M5*s23 - 2*M1*M2*M5*s45 + 1/2*M1*M2*s12*s23 - 1/2*M1*M2*s12*s45 - 1/2*M1*M2*s23*s45 - 1/2*M1*M2*s45^2 - M1*M3*M5*s12 - 2*M1*M3*M5*s23 - 1/2*M1*M3*s12^2 - M1*M3*s12*s23 - 1/2*M1*M3*s12*s45 + M1*M5^2*s23 + 3/2*M1*M5*s12*s23 + 1/2*M1*M5*s23*s45 + 1/2*M1*s12^2*s23 + 1/2*M1*s12*s23*s45 + M2^2*M5^2 - M2^2*M5*s23 + M2^2*M5*s45 + 1/4*M2^2*s23^2 + 1/2*M2^2*s23*s45 + 1/4*M2^2*s45^2 + M2*M3*M5*s12 + 2*M2*M3*M5*s23 + 1/2*M2*M3*s12*s23 + 1/2*M2*M3*s12*s45 - M2*M5^2*s23 + 3/2*M2*M5*s23^2 - 1/2*M2*M5*s23*s45 + 1/2*M2*s12*s23^2 + 1/2*M2*s12*s23*s45 + 1/4*M3^2*s12^2 + 1/2*M3*M5*s12*s23 + 1/2*M3*s12^2*s23 + 1/4*M5^2*s23^2 + 1/2*M5*s12*s23^2 + 1/4*s12^2*s23^2
codim: 2, face: 9/20, weights: [-1, -1, 0, -1, -1], discriminant: M1^2*M4^2 + 2*M1^2*M4*M5 + M1^2*M4*s12 + M1^2*M4*s34 + M1^2*M5^2 + M1^2*M5*s12 - M1^2*M5*s34 + 1/4*M1^2*s12^2 - 1/2*M1^2*s12*s34 + 1/4*M1^2*s34^2 - 2*M1*M2*M4^2 - 4*M1*M2*M4*M5 - M1*M2*M4*s12 - M1*M2*M4*s34 - M1*M2*M4*s51 - 2*M1*M2*M5^2 - M1*M2*M5*s12 + M1*M2*M5*s34 + M1*M2*M5*s51 + 1/2*M1*M2*s12*s51 - 1/2*M1*M2*s34*s51 - M1*M4^2*s12 - M1*M4*M5*s12 + M1*M4*M5*s34 - M1*M4*M5*s51 - 1/2*M1*M4*s12^2 - 3/2*M1*M4*s12*s34 - M1*M5^2*s34 + M1*M5^2*s51 - 3/2*M1*M5*s12*s34 + 3/2*M1*M5*s12*s51 + 3/2*M1*M5*s34^2 - 3/2*M1*M5*s34*s51 + 1/2*M1*s12^2*s51 - 1/2*M1*s12*s34*s51 + M2^2*M4^2 + 2*M2^2*M4*M5 + M2^2*M4*s51 + M2^2*M5^2 - M2^2*M5*s51 + 1/4*M2^2*s51^2 + M2*M4^2*s12 + M2*M4*M5*s12 - M2*M4*M5*s34 + M2*M4*M5*s51 + 3/2*M2*M4*s12*s51 + M2*M5^2*s34 - M2*M5^2*s51 - 3/2*M2*M5*s34*s51 + 3/2*M2*M5*s51^2 + 1/2*M2*s12*s51^2 + 1/4*M4^2*s12^2 - 1/2*M4*M5*s12*s34 + 1/2*M4*M5*s12*s51 + 1/2*M4*s12^2*s51 + 1/4*M5^2*s34^2 - 1/2*M5^2*s34*s51 + 1/4*M5^2*s51^2 - 1/2*M5*s12*s34*s51 + 1/2*M5*s12*s51^2 + 1/4*s12^2*s51^2
codim: 2, face: 10/20, weights: [-1, 0, -1, -1, -1], discriminant: M1^2*M4^2 + 2*M1^2*M4*M5 + M1^2*M4*s45 + M1^2*M5^2 + M1^2*M5*s45 + 1/4*M1^2*s45^2 - 2*M1*M3*M4^2 - 4*M1*M3*M4*M5 + 2*M1*M3*M4*s23 - M1*M3*M4*s45 - M1*M3*M4*s51 - 2*M1*M3*M5^2 - M1*M3*M5*s45 + M1*M3*M5*s51 + 1/2*M1*M3*s45*s51 + M1*M4^2*s23 - M1*M4^2*s45 + 4*M1*M4*M5*s23 - M1*M4*M5*s45 - M1*M4*M5*s51 + 3/2*M1*M4*s23*s45 - 1/2*M1*M4*s45^2 + M1*M5^2*s23 + M1*M5^2*s51 + 1/2*M1*M5*s23*s45 + 3/2*M1*M5*s45*s51 + 1/2*M1*s45^2*s51 + M3^2*M4^2 + 2*M3^2*M4*M5 + M3^2*M4*s51 + M3^2*M5^2 - M3^2*M5*s51 + 1/4*M3^2*s51^2 + M3*M4^2*s23 + M3*M4^2*s45 + 4*M3*M4*M5*s23 + M3*M4*M5*s45 + M3*M4*M5*s51 + 1/2*M3*M4*s23*s51 + 3/2*M3*M4*s45*s51 + M3*M5^2*s23 - M3*M5^2*s51 - 1/2*M3*M5*s23*s51 + 3/2*M3*M5*s51^2 + 1/2*M3*s45*s51^2 + 1/4*M4^2*s23^2 + 1/2*M4^2*s23*s45 + 1/4*M4^2*s45^2 + 2*M4*M5^2*s23 + 3/2*M4*M5*s23^2 + 3/2*M4*M5*s23*s45 - 1/2*M4*M5*s23*s51 + 1/2*M4*M5*s45*s51 + 1/2*M4*s23*s45*s51 + 1/2*M4*s45^2*s51 + 1/4*M5^2*s23^2 + 1/2*M5^2*s23*s51 + 1/4*M5^2*s51^2 + 1/2*M5*s23*s45*s51 + 1/2*M5*s45*s51^2 + 1/4*s45^2*s51^2
codim: 2, face: 11/20, weights: [1, 1, 1, 1, 2], discriminant: 1
codim: 2, face: 12/20, weights: [1, 1, 1, 2, 1], discriminant: 1
codim: 2, face: 13/20, weights: [1, 1, 2, 1, 1], discriminant: 1
codim: 2, face: 14/20, weights: [1, 2, 1, 1, 1], discriminant: 1
codim: 2, face: 15/20, weights: [1, 0, 0, 0, 1], discriminant: 1
codim: 2, face: 16/20, weights: [1, 0, 0, 1, 0], discriminant: -2*M2*s45 + M3^2 - M3*s12 - M3*s45 + 1/4*s12^2 - 1/2*s12*s45 + 1/4*s45^2
codim: 2, face: 17/20, weights: [1, 0, 1, 0, 0], discriminant: M2*M4 + 1/2*M4*s12 - 1/16*s12^2 + 1/8*s12*s34 - 1/16*s34^2
codim: 2, face: 18/20, weights: [0, -1, -1, -1, -1], discriminant: M2^2*M4^2 + 2*M2^2*M4*M5 + M2^2*M4*s45 + M2^2*M5^2 + M2^2*M5*s45 + 1/4*M2^2*s45^2 - 2*M2*M3*M4^2 - 4*M2*M3*M4*M5 - M2*M3*M4*s12 - M2*M3*M4*s34 - M2*M3*M4*s45 - 2*M2*M3*M5^2 - M2*M3*M5*s12 + M2*M3*M5*s34 - M2*M3*M5*s45 - 1/2*M2*M3*s12*s45 + 1/2*M2*M3*s34*s45 + M2*M4^2*s12 - M2*M4^2*s45 + M2*M4*M5*s12 - M2*M4*M5*s34 - M2*M4*M5*s45 + 1/2*M2*M4*s12*s45 - 1/2*M2*M4*s45^2 + M2*M5^2*s34 + 3/2*M2*M5*s34*s45 + 1/2*M2*s34*s45^2 + M3^2*M4^2 + 2*M3^2*M4*M5 + M3^2*M4*s12 + M3^2*M4*s34 + M3^2*M5^2 + M3^2*M5*s12 - M3^2*M5*s34 + 1/4*M3^2*s12^2 - 1/2*M3^2*s12*s34 + 1/4*M3^2*s34^2 - M3*M4^2*s12 + M3*M4^2*s45 - M3*M4*M5*s12 + M3*M4*M5*s34 + M3*M4*M5*s45 - 1/2*M3*M4*s12^2 - 3/2*M3*M4*s12*s34 + 1/2*M3*M4*s12*s45 + 3/2*M3*M4*s34*s45 - M3*M5^2*s34 - 3/2*M3*M5*s12*s34 + 3/2*M3*M5*s34^2 - 1/2*M3*s12*s34*s45 + 1/2*M3*s34^2*s45 + 1/4*M4^2*s12^2 - 1/2*M4^2*s12*s45 + 1/4*M4^2*s45^2 - 1/2*M4*M5*s12*s34 + 1/2*M4*M5*s34*s45 - 1/2*M4*s12*s34*s45 + 1/2*M4*s34*s45^2 + 1/4*M5^2*s34^2 + 1/2*M5*s34^2*s45 + 1/4*s34^2*s45^2
codim: 2, face: 19/20, weights: [2, 1, 1, 1, 1], discriminant: 1
codim: 2, face: 20/20, weights: [1, 1, 0, 0, 0], discriminant: 1
codim: 1, face: 1/7, weights: [0, 0, 0, 0, 1], discriminant: M1*M3^2 - 2*M1*M3*M4 - M1*M3*s34 + M1*M4^2 + M1*M4*s34 + 1/4*M1*s34^2 - 1/2*M2*M3*s23 + 1/2*M2*M3*s51 + 1/2*M2*M4*s23 - 1/2*M2*M4*s51 + 1/4*M2*s23*s34 - 1/4*M2*s34*s51 + 1/2*M3^2*s51 - 1/2*M3*M4*s23 - 1/2*M3*M4*s51 - 1/4*M3*s23*s34 + 1/4*M3*s23*s51 - 1/4*M3*s34*s51 - 1/4*M3*s51^2 + 1/2*M4^2*s23 - 1/4*M4*s23^2 + 1/2*M4*s23*s34 + 1/4*M4*s23*s51 - 1/8*s23^2*s34 + 1/8*s23*s34^2 + 1/8*s23*s34*s51
codim: 1, face: 2/7, weights: [0, 0, 0, 1, 0], discriminant: 2*M1^2*s45 - 4*M1*M2*s45 + M1*s12^2 + M1*s12*s23 - M1*s12*s45 + M1*s23*s45 + 2*M2^2*s45 + M2*s12*s23 + M2*s12*s45 + M2*s23^2 - M2*s23*s45 + 1/2*s12^2*s23 + 1/2*s12*s23^2 - 1/2*s12*s23*s45
codim: 1, face: 3/7, weights: [0, 0, 1, 0, 0], discriminant: M1*M4^2 - 2*M1*M4*M5 - M1*M4*s12 + M1*M4*s34 + M1*M5^2 + M1*M5*s12 - M1*M5*s34 + 1/4*M1*s12^2 - 1/2*M1*s12*s34 + 1/4*M1*s34^2 - 1/2*M2*M4*s51 + 1/2*M2*M5*s51 + 1/4*M2*s12*s51 - 1/4*M2*s34*s51 - 1/2*M4*M5*s51 - 1/4*M4*s12*s51 + 1/2*M5^2*s51 + 1/2*M5*s12*s51 - 1/4*M5*s34*s51 - 1/4*M5*s51^2 + 1/8*s12^2*s51 - 1/8*s12*s34*s51 - 1/8*s12*s51^2
codim: 1, face: 4/7, weights: [0, 1, 0, 0, 0], discriminant: M1*M4^2 - 2*M1*M4*M5 - M1*M4*s45 + M1*M5^2 + M1*M5*s45 + 1/4*M1*s45^2 - 1/2*M3*M4*s51 + 1/2*M3*M5*s51 + 1/4*M3*s45*s51 - 1/2*M4*M5*s51 - 1/4*M4*s23*s51 - 1/4*M4*s45*s51 + 1/2*M5^2*s51 + 1/4*M5*s23*s51 + 1/2*M5*s45*s51 - 1/4*M5*s51^2 + 1/8*s23*s45*s51 + 1/8*s45^2*s51 - 1/8*s45*s51^2
codim: 1, face: 5/7, weights: [-1, -1, -1, -1, -1], discriminant: M1^2*M4*s12^2 - M1^2*M4*s12*s34 + 2*M1^2*M4*s12*s45 - M1^2*M4*s34*s45 + M1^2*M4*s45^2 - M1^2*M5*s12*s34 + M1^2*M5*s34^2 - M1^2*M5*s34*s45 + 1/2*M1^2*s12*s34*s45 - 1/2*M1^2*s34^2*s45 + 1/2*M1^2*s34*s45^2 - 2*M1*M2*M4^2*s23 + 4*M1*M2*M4*M5*s23 + M1*M2*M4*s12*s23 - 2*M1*M2*M4*s12*s45 + M1*M2*M4*s12*s51 - M1*M2*M4*s23*s34 - M1*M2*M4*s23*s45 + M1*M2*M4*s34*s45 - 2*M1*M2*M4*s45^2 + M1*M2*M4*s45*s51 - 2*M1*M2*M5^2*s23 - M1*M2*M5*s12*s23 + M1*M2*M5*s12*s51 + M1*M2*M5*s23*s34 + M1*M2*M5*s23*s45 + M1*M2*M5*s34*s45 - 2*M1*M2*M5*s34*s51 + M1*M2*M5*s45*s51 + 1/2*M1*M2*s12*s23*s45 - 1/2*M1*M2*s12*s45*s51 - 1/2*M1*M2*s23*s34*s45 - 1/2*M1*M2*s34*s45^2 + M1*M2*s34*s45*s51 - 1/2*M1*M2*s45^2*s51 + 2*M1*M3*M4^2*s23 - 4*M1*M3*M4*M5*s23 - 2*M1*M3*M4*s12^2 - 2*M1*M3*M4*s12*s23 + 2*M1*M3*M4*s12*s34 - 2*M1*M3*M4*s12*s45 - M1*M3*M4*s12*s51 + 2*M1*M3*M4*s23*s34 + M1*M3*M4*s34*s45 - M1*M3*M4*s45*s51 + 2*M1*M3*M5^2*s23 + 2*M1*M3*M5*s12*s23 + 2*M1*M3*M5*s12*s34 - M1*M3*M5*s12*s51 - 2*M1*M3*M5*s23*s34 - 2*M1*M3*M5*s34^2 + M1*M3*M5*s34*s45 + 2*M1*M3*M5*s34*s51 - M1*M3*M5*s45*s51 + 1/2*M1*M3*s12^2*s23 - 1/2*M1*M3*s12^2*s51 - M1*M3*s12*s23*s34 - 1/2*M1*M3*s12*s34*s45 + 1/2*M1*M3*s12*s34*s51 - 1/2*M1*M3*s12*s45*s51 + 1/2*M1*M3*s23*s34^2 + 1/2*M1*M3*s34^2*s45 - 1/2*M1*M3*s34*s45*s51 - M1*M4^2*s12*s23 - M1*M4^2*s23*s45 + M1*M4*M5*s12*s23 + M1*M4*M5*s23*s34 + M1*M4*M5*s23*s45 + 3/2*M1*M4*s12^2*s23 + 1/2*M1*M4*s12^2*s51 - 3/2*M1*M4*s12*s23*s34 + 3/2*M1*M4*s12*s23*s45 - 1/2*M1*M4*s12*s34*s45 + M1*M4*s12*s45*s51 - 3/2*M1*M4*s23*s34*s45 - 1/2*M1*M4*s34*s45^2 + 1/2*M1*M4*s45^2*s51 - M1*M5^2*s23*s34 - 3/2*M1*M5*s12*s23*s34 - 1/2*M1*M5*s12*s34*s51 + 3/2*M1*M5*s23*s34^2 + 1/2*M1*M5*s34^2*s45 - 1/2*M1*M5*s34*s45*s51 + 1/2*M1*s12*s23*s34*s45 + 1/2*M1*s12*s34*s45*s51 - 1/2*M1*s23*s34^2*s45 - 1/2*M1*s34^2*s45^2 + 1/2*M1*s34*s45^2*s51 + 2*M2^2*M4^2*s23 - 4*M2^2*M4*M5*s23 + M2^2*M4*s23*s45 + M2^2*M4*s23*s51 + M2^2*M4*s45^2 - M2^2*M4*s45*s51 + 2*M2^2*M5^2*s23 - M2^2*M5*s23*s45 - M2^2*M5*s23*s51 - M2^2*M5*s45*s51 + M2^2*M5*s51^2 + 1/2*M2^2*s23*s45*s51 + 1/2*M2^2*s45^2*s51 - 1/2*M2^2*s45*s51^2 - 2*M2*M3*M4^2*s23 + 4*M2*M3*M4*M5*s23 + M2*M3*M4*s12*s23 + 2*M2*M3*M4*s12*s45 - M2*M3*M4*s12*s51 - M2*M3*M4*s23*s34 - M2*M3*M4*s23*s51 - M2*M3*M4*s34*s45 + M2*M3*M4*s45*s51 - 2*M2*M3*M5^2*s23 - M2*M3*M5*s12*s23 - M2*M3*M5*s12*s51 + M2*M3*M5*s23*s34 + M2*M3*M5*s23*s51 - M2*M3*M5*s34*s45 + 2*M2*M3*M5*s34*s51 + M2*M3*M5*s45*s51 - 2*M2*M3*M5*s51^2 + 1/2*M2*M3*s12*s23*s51 + M2*M3*s12*s45*s51 - 1/2*M2*M3*s12*s51^2 - 1/2*M2*M3*s23*s34*s51 - 1/2*M2*M3*s34*s45*s51 + 1/2*M2*M3*s45*s51^2 + 2*M2*M4^2*s12*s23 - M2*M4^2*s23^2 + M2*M4^2*s23*s45 - 2*M2*M4*M5*s12*s23 + 2*M2*M4*M5*s23^2 - 2*M2*M4*M5*s23*s34 - M2*M4*M5*s23*s45 + M2*M4*M5*s23*s51 + 1/2*M2*M4*s12*s23^2 + 3/2*M2*M4*s12*s23*s45 + 3/2*M2*M4*s12*s23*s51 - 1/2*M2*M4*s12*s45*s51 - 1/2*M2*M4*s23^2*s34 + 3/2*M2*M4*s23*s45*s51 + 1/2*M2*M4*s34*s45^2 - 1/2*M2*M4*s45^2*s51 - M2*M5^2*s23^2 + 2*M2*M5^2*s23*s34 - M2*M5^2*s23*s51 - 1/2*M2*M5*s12*s23^2 + 1/2*M2*M5*s12*s51^2 + 1/2*M2*M5*s23^2*s34 - 3/2*M2*M5*s23*s34*s45 - 3/2*M2*M5*s23*s34*s51 + 3/2*M2*M5*s23*s45*s51 - 1/2*M2*M5*s34*s45*s51 + 1/2*M2*M5*s45*s51^2 + 1/2*M2*s12*s23*s45*s51 - 1/2*M2*s12*s45*s51^2 + 1/2*M2*s23*s34*s45*s51 + 1/2*M2*s34*s45^2*s51 - 1/2*M2*s45^2*s51^2 + M3^2*M4*s12^2 - M3^2*M4*s12*s34 + M3^2*M4*s12*s51 - M3^2*M5*s12*s34 + M3^2*M5*s12*s51 + M3^2*M5*s34^2 - 2*M3^2*M5*s34*s51 + M3^2*M5*s51^2 + 1/2*M3^2*s12^2*s51 - 1/2*M3^2*s12*s34*s51 + 1/2*M3^2*s12*s51^2 - M3*M4^2*s12*s23 + M3*M4*M5*s12*s23 + M3*M4*M5*s23*s34 - M3*M4*M5*s23*s51 + 3/2*M3*M4*s12^2*s23 - 1/2*M3*M4*s12^2*s51 - 3/2*M3*M4*s12*s23*s34 + 1/2*M3*M4*s12*s34*s45 - 1/2*M3*M4*s12*s45*s51 - M3*M5^2*s23*s34 + M3*M5^2*s23*s51 - 3/2*M3*M5*s12*s23*s34 + 3/2*M3*M5*s12*s23*s51 + 1/2*M3*M5*s12*s34*s51 - 1/2*M3*M5*s12*s51^2 + 3/2*M3*M5*s23*s34^2 - 3/2*M3*M5*s23*s34*s51 - 1/2*M3*M5*s34^2*s45 + M3*M5*s34*s45*s51 - 1/2*M3*M5*s45*s51^2 + 1/2*M3*s12^2*s23*s51 - 1/2*M3*s12^2*s51^2 - 1/2*M3*s12*s23*s34*s51 + 1/2*M3*s12*s34*s45*s51 - 1/2*M3*s12*s45*s51^2 + 1/2*M4^2*s12^2*s23 - 1/2*M4^2*s12*s23^2 + 1/2*M4^2*s12*s23*s45 + 1/2*M4*M5*s12*s23^2 - M4*M5*s12*s23*s34 + 1/2*M4*M5*s12*s23*s51 + 1/2*M4*M5*s23^2*s34 - 1/2*M4*M5*s23*s34*s45 + 1/2*M4*M5*s23*s45*s51 + 1/2*M4*s12^2*s23^2 + 1/2*M4*s12^2*s23*s51 - 1/2*M4*s12*s23^2*s34 + 1/2*M4*s12*s23*s34*s45 + 1/2*M4*s12*s23*s45*s51 - 1/2*M5^2*s23^2*s34 + 1/2*M5^2*s23*s34^2 - 1/2*M5^2*s23*s34*s51 - 1/2*M5*s12*s23^2*s34 - 1/2*M5*s12*s23*s34*s51 + 1/2*M5*s23^2*s34^2 - 1/2*M5*s23*s34^2*s45 + 1/2*M5*s23*s34*s45*s51 + 1/2*s12*s23*s34*s45*s51
codim: 1, face: 6/7, weights: [1, 1, 1, 1, 1], discriminant: 1
codim: 1, face: 7/7, weights: [1, 0, 0, 0, 0], discriminant: M2*M4^2 - 2*M2*M4*M5 - M2*M4*s45 + M2*M5^2 + M2*M5*s45 + 1/4*M2*s45^2 + 1/2*M3*M4*s12 - 1/2*M3*M4*s34 - 1/2*M3*M5*s12 + 1/2*M3*M5*s34 - 1/4*M3*s12*s45 + 1/4*M3*s34*s45 + 1/2*M4^2*s12 - 1/2*M4*M5*s12 - 1/2*M4*M5*s34 - 1/4*M4*s12^2 + 1/4*M4*s12*s34 - 1/4*M4*s12*s45 - 1/4*M4*s34*s45 + 1/2*M5^2*s34 + 1/4*M5*s12*s34 - 1/4*M5*s34^2 + 1/2*M5*s34*s45 + 1/8*s12*s34*s45 - 1/8*s34^2*s45 + 1/8*s34*s45^2
codim: 0, face: 1/1, weights: [0, 0, 0, 0, 0], discriminant: M1^2*M3^2 + 2*M1^2*M3*M4 + M1^2*M3*s45 + M1^2*M4^2 + M1^2*M4*s45 + 1/4*M1^2*s45^2 - 2*M1*M2*M3^2 - 4*M1*M2*M3*M4 - 2*M1*M2*M3*s45 - 2*M1*M2*M4^2 - 2*M1*M2*M4*s45 - 1/2*M1*M2*s45^2 - M1*M3^2*s12 - 2*M1*M3*M4*s12 + 1/2*M1*M3*s12*s23 + M1*M3*s12*s34 - 1/2*M1*M3*s12*s45 - 1/2*M1*M3*s12*s51 - 1/2*M1*M3*s23*s34 - M1*M3*s34^2 - 1/2*M1*M3*s34*s45 + M1*M3*s34*s51 + 1/2*M1*M3*s45*s51 - M1*M4^2*s12 + M1*M4*s12^2 + 1/2*M1*M4*s12*s23 - M1*M4*s12*s34 - 1/2*M1*M4*s12*s45 + 1/2*M1*M4*s12*s51 - 1/2*M1*M4*s23*s34 - 1/2*M1*M4*s34*s45 + 1/2*M1*M4*s45*s51 + 1/4*M1*s12*s23*s45 + 1/2*M1*s12*s34*s45 - 1/4*M1*s12*s45*s51 - 1/4*M1*s23*s34*s45 - 1/2*M1*s34^2*s45 - 1/4*M1*s34*s45^2 + 1/2*M1*s34*s45*s51 + 1/4*M1*s45^2*s51 + M2^2*M3^2 + 2*M2^2*M3*M4 + M2^2*M3*s45 + M2^2*M4^2 + M2^2*M4*s45 + 1/4*M2^2*s45^2 + M2*M3^2*s12 + 2*M2*M3*M4*s12 + 1/2*M2*M3*s12*s23 + 1/2*M2*M3*s12*s45 - 1/2*M2*M3*s12*s51 - 1/2*M2*M3*s23*s34 + M2*M3*s23*s51 + 1/2*M2*M3*s34*s45 + M2*M3*s34*s51 - 1/2*M2*M3*s45*s51 - M2*M3*s51^2 + M2*M4^2*s12 + 1/2*M2*M4*s12*s23 + 1/2*M2*M4*s12*s45 + 1/2*M2*M4*s12*s51 - 1/2*M2*M4*s23*s34 + M2*M4*s23*s51 + 1/2*M2*M4*s34*s45 - 1/2*M2*M4*s45*s51 + 1/4*M2*s12*s23*s45 - 1/4*M2*s12*s45*s51 - 1/4*M2*s23*s34*s45 + 1/2*M2*s23*s45*s51 + 1/4*M2*s34*s45^2 + 1/2*M2*s34*s45*s51 - 1/4*M2*s45^2*s51 - 1/2*M2*s45*s51^2 + 1/4*M3^2*s12^2 + 1/2*M3*M4*s12^2 + 1/4*M3*s12^2*s23 - 1/4*M3*s12^2*s51 - 1/4*M3*s12*s23*s34 + 1/2*M3*s12*s23*s51 + 1/4*M3*s12*s34*s45 + 1/2*M3*s12*s34*s51 - 1/4*M3*s12*s45*s51 - 1/2*M3*s12*s51^2 + 1/4*M4^2*s12^2 + 1/4*M4*s12^2*s23 + 1/4*M4*s12^2*s51 - 1/4*M4*s12*s23*s34 + 1/2*M4*s12*s23*s51 + 1/4*M4*s12*s34*s45 - 1/4*M4*s12*s45*s51 + 1/16*s12^2*s23^2 - 1/8*s12^2*s23*s51 + 1/16*s12^2*s51^2 - 1/8*s12*s23^2*s34 + 1/8*s12*s23*s34*s45 + 1/8*s12*s23*s34*s51 + 1/8*s12*s23*s45*s51 + 1/8*s12*s34*s45*s51 - 1/8*s12*s45*s51^2 + 1/16*s23^2*s34^2 - 1/8*s23*s34^2*s45 + 1/8*s23*s34*s45*s51 + 1/16*s34^2*s45^2 - 1/8*s34*s45^2*s51 + 1/16*s45^2*s51^2
