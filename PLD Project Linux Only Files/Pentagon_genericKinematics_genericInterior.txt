Pentagon_genericKinematics_genericInterior

edges: [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]]
nodes: [1, 2, 3, 4, 5]
internal_masses: Variable[M1, M2, M3, M4, M5]
external_masses: Variable[m1, m2, m3, m4, m5]

schwinger parameters: AbstractAlgebra.Generic.LaurentMPolyWrap{QQMPolyRingElem, AbstractAlgebra.Generic.MPoly{QQMPolyRingElem}, AbstractAlgebra.Generic.LaurentMPolyWrapRing{QQMPolyRingElem, AbstractAlgebra.Generic.MPolyRing{QQMPolyRingElem}}}[α₁, α₂, α₃, α₄, α₅]
kinematic variables: QQMPolyRingElem[M1, M2, M3, M4, M5, m1, m2, m3, m4, m5, s12, s23, s34, s45, s51]

U: α₁ + α₂ + α₃ + α₄ + α₅
F: -M1*α₁^2 + (-M1 - M2 + m2)*α₁*α₂ + (-M1 - M3 + s23)*α₁*α₃ + (-M1 - M4 + s51)*α₁*α₄ + (-M1 - M5 + m1)*α₁*α₅ - M2*α₂^2 + (-M2 - M3 + m3)*α₂*α₃ + (-M2 - M4 + s34)*α₂*α₄ + (-M2 - M5 + s12)*α₂*α₅ - M3*α₃^2 + (-M3 - M4 + m4)*α₃*α₄ + (-M3 - M5 + s45)*α₃*α₅ - M4*α₄^2 + (-M4 - M5 + m5)*α₄*α₅ - M5*α₅^2

discriminants: Any[AbstractAlgebra.Generic.FracFieldElem{QQMPolyRingElem}[4*M1^2*m4^2 - 8*M1^2*m4*m5 - 8*M1^2*m4*s45 + 4*M1^2*m5^2 - 8*M1^2*m5*s45 + 4*M1^2*s45^2 - 8*M1*M2*m4^2 + 16*M1*M2*m4*m5 + 16*M1*M2*m4*s45 - 8*M1*M2*m5^2 + 16*M1*M2*m5*s45 - 8*M1*M2*s45^2 - 4*M1*m1*m3*m4 - 4*M1*m1*m3*m5 + 4*M1*m1*m3*s45 + 4*M1*m1*m4^2 - 4*M1*m1*m4*m5 + 8*M1*m1*m4*s12 - 4*M1*m1*m4*s34 - 4*M1*m1*m4*s45 + 4*M1*m1*m5*s34 - 4*M1*m1*s34*s45 + 4*M1*m2*m4^2 - 8*M1*m2*m4*m5 - 8*M1*m2*m4*s45 + 4*M1*m2*m5^2 - 8*M1*m2*m5*s45 + 4*M1*m2*s45^2 - 8*M1*m3^2*m5 + 4*M1*m3*m4*m5 + 8*M1*m3*m4*s12 - 8*M1*m3*m4*s34 + 4*M1*m3*m4*s51 - 4*M1*m3*m5^2 + 8*M1*m3*m5*s12 + 8*M1*m3*m5*s23 + 8*M1*m3*m5*s34 + 4*M1*m3*m5*s45 - 4*M1*m3*m5*s51 - 8*M1*m3*s12*s45 + 8*M1*m3*s34*s45 - 4*M1*m3*s45*s51 - 4*M1*m4^2*s12 + 4*M1*m4*m5*s12 - 4*M1*m4*m5*s23 - 8*M1*m4*s12^2 - 4*M1*m4*s12*s23 + 8*M1*m4*s12*s34 + 4*M1*m4*s12*s45 - 4*M1*m4*s12*s51 + 4*M1*m4*s23*s34 + 4*M1*m4*s34*s45 - 4*M1*m4*s45*s51 + 4*M1*m5^2*s23 - 4*M1*m5*s12*s23 - 8*M1*m5*s12*s34 + 4*M1*m5*s12*s51 - 4*M1*m5*s23*s34 - 4*M1*m5*s23*s45 + 4*M1*m5*s34*s45 - 4*M1*m5*s45*s51 + 4*M1*s12*s23*s45 + 8*M1*s12*s34*s45 - 4*M1*s12*s45*s51 - 4*M1*s23*s34*s45 - 8*M1*s34^2*s45 - 4*M1*s34*s45^2 + 8*M1*s34*s45*s51 + 4*M1*s45^2*s51 + 4*M2^2*m4^2 - 8*M2^2*m4*m5 - 8*M2^2*m4*s45 + 4*M2^2*m5^2 - 8*M2^2*m5*s45 + 4*M2^2*s45^2 - 8*M2*m1^2*m4 - 4*M2*m1*m3*m4 - 4*M2*m1*m3*m5 + 4*M2*m1*m3*s45 - 4*M2*m1*m4^2 + 4*M2*m1*m4*m5 + 8*M2*m1*m4*s12 + 8*M2*m1*m4*s23 - 4*M2*m1*m4*s34 + 4*M2*m1*m4*s45 + 8*M2*m1*m4*s51 + 8*M2*m1*m5*s23 + 4*M2*m1*m5*s34 - 8*M2*m1*m5*s51 - 8*M2*m1*s23*s45 - 4*M2*m1*s34*s45 + 8*M2*m1*s45*s51 + 4*M2*m2*m4^2 - 8*M2*m2*m4*m5 - 8*M2*m2*m4*s45 + 4*M2*m2*m5^2 - 8*M2*m2*m5*s45 + 4*M2*m2*s45^2 - 4*M2*m3*m4*m5 + 4*M2*m3*m4*s51 + 4*M2*m3*m5^2 + 8*M2*m3*m5*s23 - 4*M2*m3*m5*s45 - 4*M2*m3*m5*s51 - 4*M2*m3*s45*s51 + 4*M2*m4^2*s12 - 4*M2*m4*m5*s12 + 4*M2*m4*m5*s23 - 4*M2*m4*s12*s23 - 4*M2*m4*s12*s45 - 4*M2*m4*s12*s51 + 4*M2*m4*s23*s34 - 8*M2*m4*s23*s51 - 4*M2*m4*s34*s45 + 4*M2*m4*s45*s51 - 4*M2*m5^2*s23 - 4*M2*m5*s12*s23 + 4*M2*m5*s12*s51 - 8*M2*m5*s23^2 - 4*M2*m5*s23*s34 + 4*M2*m5*s23*s45 + 8*M2*m5*s23*s51 - 4*M2*m5*s34*s45 + 4*M2*m5*s45*s51 + 4*M2*s12*s23*s45 - 4*M2*s12*s45*s51 - 4*M2*s23*s34*s45 + 8*M2*s23*s45*s51 + 4*M2*s34*s45^2 + 8*M2*s34*s45*s51 - 4*M2*s45^2*s51 - 8*M2*s45*s51^2 + m1^2*m3^2 - 2*m1^2*m3*m4 - 2*m1^2*m3*s34 + m1^2*m4^2 - 2*m1^2*m4*s34 + m1^2*s34^2 - 2*m1*m2*m3*m4 - 2*m1*m2*m3*m5 + 2*m1*m2*m3*s45 + 2*m1*m2*m4^2 - 2*m1*m2*m4*m5 + 4*m1*m2*m4*s12 - 2*m1*m2*m4*s34 - 2*m1*m2*m4*s45 + 2*m1*m2*m5*s34 - 2*m1*m2*s34*s45 - 2*m1*m3^2*m5 - 2*m1*m3^2*s51 + 2*m1*m3*m4*m5 + 2*m1*m3*m4*s12 - 4*m1*m3*m4*s34 + 2*m1*m3*m4*s51 + 2*m1*m3*m5*s23 + 2*m1*m3*m5*s34 - 4*m1*m3*m5*s51 - 2*m1*m3*s12*s23 + 2*m1*m3*s12*s51 + 2*m1*m3*s23*s34 + 2*m1*m3*s34*s45 + 2*m1*m3*s34*s51 + 2*m1*m3*s45*s51 - 2*m1*m4^2*s12 - 2*m1*m4*m5*s23 + 2*m1*m4*s12*s23 + 2*m1*m4*s12*s34 + 2*m1*m4*s12*s51 + 2*m1*m4*s23*s34 + 2*m1*m4*s34*s45 - 2*m1*m4*s45*s51 + 2*m1*m5*s23*s34 + 2*m1*s12*s23*s34 - 2*m1*s12*s34*s51 - 2*m1*s23*s34^2 - 4*m1*s23*s34*s45 - 2*m1*s34^2*s45 + 2*m1*s34*s45*s51 + m2^2*m4^2 - 2*m2^2*m4*m5 - 2*m2^2*m4*s45 + m2^2*m5^2 - 2*m2^2*m5*s45 + m2^2*s45^2 - 2*m2*m3*m4*m5 + 2*m2*m3*m4*s51 + 2*m2*m3*m5^2 + 4*m2*m3*m5*s23 - 2*m2*m3*m5*s45 - 2*m2*m3*m5*s51 - 2*m2*m3*s45*s51 + 2*m2*m4^2*s12 - 2*m2*m4*m5*s12 - 2*m2*m4*m5*s23 + 4*m2*m4*m5*s45 - 2*m2*m4*s12*s23 - 2*m2*m4*s12*s45 - 2*m2*m4*s12*s51 + 2*m2*m4*s23*s34 - 2*m2*m4*s34*s45 - 2*m2*m4*s45*s51 + 2*m2*m5^2*s23 - 2*m2*m5*s12*s23 + 2*m2*m5*s12*s51 - 2*m2*m5*s23*s34 - 2*m2*m5*s23*s45 - 2*m2*m5*s34*s45 - 2*m2*m5*s45*s51 + 2*m2*s12*s23*s45 - 2*m2*s12*s45*s51 - 2*m2*s23*s34*s45 + 2*m2*s34*s45^2 + 4*m2*s34*s45*s51 + 2*m2*s45^2*s51 + m3^2*m5^2 - 2*m3^2*m5*s51 + m3^2*s51^2 - 2*m3*m4*m5*s12 + 2*m3*m4*s12*s51 - 2*m3*m5^2*s23 + 2*m3*m5*s12*s23 + 2*m3*m5*s12*s51 + 2*m3*m5*s23*s34 + 2*m3*m5*s23*s51 - 2*m3*m5*s34*s45 + 2*m3*m5*s45*s51 + 2*m3*s12*s23*s51 - 4*m3*s12*s45*s51 - 2*m3*s12*s51^2 - 2*m3*s23*s34*s51 + 2*m3*s34*s45*s51 - 2*m3*s45*s51^2 + m4^2*s12^2 + 2*m4*m5*s12*s23 - 2*m4*s12^2*s23 - 2*m4*s12^2*s51 + 2*m4*s12*s23*s34 - 4*m4*s12*s23*s51 - 2*m4*s12*s34*s45 + 2*m4*s12*s45*s51 + m5^2*s23^2 - 2*m5*s12*s23^2 - 4*m5*s12*s23*s34 + 2*m5*s12*s23*s51 - 2*m5*s23^2*s34 + 2*m5*s23*s34*s45 - 2*m5*s23*s45*s51 + s12^2*s23^2 - 2*s12^2*s23*s51 + s12^2*s51^2 - 2*s12*s23^2*s34 + 2*s12*s23*s34*s45 + 2*s12*s23*s34*s51 + 2*s12*s23*s45*s51 + 2*s12*s34*s45*s51 - 2*s12*s45*s51^2 + s23^2*s34^2 - 2*s23*s34^2*s45 + 2*s23*s34*s45*s51 + s34^2*s45^2 - 2*s34*s45^2*s51 + s45^2*s51^2]]
